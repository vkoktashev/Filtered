{"version":3,"sources":["store/actionTypes.js","store/reducer.js","components/Comment/Comment.js","components/Comments/Comments.js","components/Filters/Filters.js","components/MainPage/MainPage.js","store/actions.js","index.js"],"names":["GET_COMMENTS_STARTED","GET_COMMENTS_SUCCESS","GET_COMMENTS_FAILURE","initialState","Map","isLoading","comments","error","getComments","state","get","Comment","comment","className","name","email","body","CommentsBlock","length","map","Filters","domains","searchFilter","setSearchFilter","domainFilter","setDomainFilter","type","placeholder","value","onChange","event","target","domain","onClick","connect","selectors","dispatch","requestComments","a","actionTypes","axios","then","response","data","catch","err","console","log","message","useState","filteredComments","setFilteredComments","useMemo","split","pop","indexOf","push","getDomains","useEffect","filter","endsWith","includes","Comments","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","action","types","merge","set","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.141bf342.chunk.js","sourcesContent":["export const GET_COMMENTS_STARTED = \"GET_COMMENTS_STARTED\";\r\nexport const GET_COMMENTS_SUCCESS = \"GET_COMMENTS_SUCCESS\";\r\nexport const GET_COMMENTS_FAILURE = \"GET_COMMENTS_FAILURE\";\r\n","import * as types from \"./actionTypes\";\r\nimport { Map } from \"immutable\";\r\n\r\n// Создаем reducer с начальным состоянием.\r\nconst initialState = Map({\r\n\tisLoading: false,\r\n\tcomments: [],\r\n\terror: null,\r\n});\r\n\r\nexport default function reducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase types.GET_COMMENTS_SUCCESS:\r\n\t\t\treturn state.merge({\r\n\t\t\t\tcomments: action.data,\r\n\t\t\t\tisLoading: false,\r\n\t\t\t\terror: null,\r\n\t\t\t});\r\n\t\tcase types.GET_COMMENTS_STARTED:\r\n\t\t\treturn state.set(\"isLoading\", true);\r\n\t\tcase types.GET_COMMENTS_FAILURE:\r\n\t\t\treturn state.merge({ isLoading: false, error: action.error });\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport function getComments(state) {\r\n\treturn state.get(\"comments\");\r\n}\r\n\r\nexport function getCommentsLoading(state) {\r\n\treturn state.get(\"comments\");\r\n}\r\n\r\nexport function getCommentsError(state) {\r\n\treturn state.get(\"error\");\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Comment({ comment, className }) {\r\n\treturn (\r\n\t\t<div className={\"comment \" + className}>\r\n\t\t\t<div className='comment__body'>\r\n\t\t\t\t<h1 className='comment__header'>{comment.name}</h1>\r\n\t\t\t\t<h6 className='comment__email'>{comment.email}</h6>\r\n\t\t\t\t<p className='comment__text'>{comment.body}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Comment;\r\n","import React from \"react\";\r\nimport Comment from \"../Comment/Comment\";\r\n\r\nfunction CommentsBlock({ comments }) {\r\n\treturn (\r\n\t\t<div className='comments'>\r\n\t\t\t<div className='comments__body'>\r\n\t\t\t\t{comments?.length > 0\r\n\t\t\t\t\t? comments.map((comment) => (\r\n\t\t\t\t\t\t\t<Comment comment={comment} className='comments__comment' />\r\n\t\t\t\t\t  ))\r\n\t\t\t\t\t: \"Комментарии не найдены\"}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CommentsBlock;\r\n","import React from \"react\";\r\n\r\nfunction Filters({\r\n\tdomains,\r\n\tsearchFilter,\r\n\tsetSearchFilter,\r\n\tdomainFilter,\r\n\tsetDomainFilter,\r\n}) {\r\n\treturn (\r\n\t\t<div className='filters'>\r\n\t\t\t<div className='filters__body'>\r\n\t\t\t\t<div className='filters__label'>Search</div>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tplaceholder='Enter Name'\r\n\t\t\t\t\tclassName='filters__search-input'\r\n\t\t\t\t\tvalue={searchFilter}\r\n\t\t\t\t\tonChange={(event) => setSearchFilter(event.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className='filters__domains-list'>\r\n\t\t\t\t\t<div className='filters__label'>Show only</div>\r\n\t\t\t\t\t{domains.map((domain) => (\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tdomainFilter === domain\r\n\t\t\t\t\t\t\t\t\t? setDomainFilter(\"\")\r\n\t\t\t\t\t\t\t\t\t: setDomainFilter(domain);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tclassName={`filters__domain ${\r\n\t\t\t\t\t\t\t\tdomainFilter === domain ? \"filters__domain_active\" : \"\"\r\n\t\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{domain}\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Filters;\r\n","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../store/actions\";\r\nimport * as selectors from \"../../store/reducer\";\r\n\r\nimport Comments from \"../Comments/Comments\";\r\nimport Filters from \"../Filters/Filters\";\r\n\r\nfunction MainPage({ comments, requestComments }) {\r\n\tconst [filteredComments, setFilteredComments] = useState([]);\r\n\tconst [domainFilter, setDomainFilter] = useState(\"\");\r\n\tconst [searchFilter, setSearchFilter] = useState(\"\");\r\n\tconst domains = useMemo(() => getDomains(comments), [comments]);\r\n\r\n\tuseEffect(() => {\r\n\t\trequestComments();\r\n\t}, [requestComments]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetFilteredComments(\r\n\t\t\tcomments?.filter(\r\n\t\t\t\t(comment) =>\r\n\t\t\t\t\tcomment?.email?.endsWith(domainFilter) &&\r\n\t\t\t\t\tcomment?.name?.includes(searchFilter)\r\n\t\t\t)\r\n\t\t);\r\n\t}, [domainFilter, searchFilter, comments]);\r\n\r\n\tfunction getDomains(comments) {\r\n\t\tlet domains = [];\r\n\t\tfor (let comment in comments) {\r\n\t\t\tlet domain = \".\" + comments[comment]?.email?.split(\".\").pop();\r\n\t\t\tif (domains.indexOf(domain) === -1) domains.push(domain);\r\n\t\t}\r\n\t\treturn domains;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='filtered'>\r\n\t\t\t<header className='header'>Filtered List</header>\r\n\t\t\t<Filters\r\n\t\t\t\tdomains={domains}\r\n\t\t\t\tsearchFilter={searchFilter}\r\n\t\t\t\tsetSearchFilter={setSearchFilter}\r\n\t\t\t\tdomainFilter={domainFilter}\r\n\t\t\t\tsetDomainFilter={setDomainFilter}\r\n\t\t\t/>\r\n\t\t\t<Comments comments={filteredComments} />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tcomments: selectors.getComments(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\trequestComments: () => {\r\n\t\t\tdispatch(actions.requestComments());\r\n\t\t},\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainPage);\r\n","import * as actionTypes from \"./actionTypes\";\r\nimport axios from \"axios\";\r\n\r\nexport function requestComments() {\r\n\treturn async (dispatch) => {\r\n\t\tdispatch({ type: actionTypes.GET_COMMENTS_STARTED });\r\n\t\taxios\r\n\t\t\t.get(\"https://jsonplaceholder.typicode.com/comments\")\r\n\t\t\t.then((response) => {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: actionTypes.GET_COMMENTS_SUCCESS,\r\n\t\t\t\t\tdata: response.data,\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t.catch(function (err) {\r\n\t\t\t\tconsole.log(err.message);\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: actionTypes.GET_COMMENTS_FAILURE,\r\n\t\t\t\t\terror: err.message,\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t};\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/css/main.css\";\nimport MainPage from \"./components/MainPage/MainPage\";\n\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport reducer from \"./store/reducer\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<MainPage />\n\t</Provider>,\n\tdocument.getElementById(\"root\")\n);\n\nexport default store;\n"],"sourceRoot":""}